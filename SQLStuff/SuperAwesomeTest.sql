SELECT * FROM ARTIST;

--Now for schema manipulation!

--Create a table
--DDL: Create
CREATE TABLE pokemon(
    pokemon_id NUMBER(15), --PRIMARY KEY,
    pokemon_name VARCHAR2(100),
    pokemon_type VARCHAR2(25),
    PRIMARY KEY(pokemon_id)
);

CREATE TABLE genre(
    id NUMBER(15) GENERATED BY DEFAULT ON NULL AS IDENTITY,
    genrename VARCHAR(20),
    PRIMARY KEY(id)
);

CREATE TABLE backlog(
    id NUMBER(15) GENERATED BY DEFAULT ON NULL AS IDENTITY,
    gamename VARCHAR(200),
    gamesystem VARCHAR(25),
    genreid NUMBER(15),
    PRIMARY KEY(id),
    FOREIGN KEY(genreid) REFERENCES Genre(id)
);



SELECT * FROM GENRE;
SELECT * FROM BACKLOG;

DROP TABLE backlog;
DROP TABLE genre;

INSERT INTO GENRE VALUES (3, '3D Platformer');
INSERT INTO BACKLOG (GAMENAME, GAMESYSTEM, GENREID) VALUES ('Banjo-Kazooie', 'N64', '3');

SELECT backlog.GAMENAME, backlog.GAMESYSTEM, genre.genrename FROM backlog INNER JOIN genre ON backlog.genreid = genre.id ORDER BY backlog.gamename;

DELETE FROM BACKLOG WHERE ID='1';
/*more notes*/
/*DataTypes in SQL: NUMBER, VARCHAR, VARCHAR2, DATE, TIMESTAMP, BLOB, CLOB*/

/*Constraintss: PRIMARY KEY, FORAIGN KEY, UNIQUE, NOT NULL, AND CHECK
PRIMARY KEY: not null and unique, represents official unique identifier for the table
FOREIGN KEY: is a reference pointer to another table's primary key
CHECK: creates an additional custom condition for the column
    CONSTRAINT name CHECK (column_name > 15)

*/

--DESC: can be used to describe the structure of the table
--DML should be commited, not DDL!
DESC pokemon;
DESCRIBE pokemon;

DROP TABLE pokemon;

--DDL ALTER
ALTER TABLE pokemon ADD pokemon_second_type VARCHAR2(25);

--DDL TRUNCATE
/*truncate delets all entries into the table while keeping the structure intact. 
DROP is like throwing out a cup of water into the trash
while truncate is like pouring out the water and keeping the cup
*/

--this is how we view all entries into a table
SELECT * FROM pokemon;

--DML Insert
INSERT INTO pokemon VALUES(1, 'Bulbasaur', 'Grass', 'Poison');
INSERT INTO pokemon VALUES(7, 'Squirtle', 'Water', null);
INSERT INTO pokemon VALUES(121, 'Starmie', 'Water', 'Psychic');
INSERT INTO pokemon VALUES(25, 'Pikachu', 'Electric', 'Normal');

INSERT INTO pokemon(pokemon_name, pokemon_id, pokemon_type) VALUES ('Blastoise', 9, 'water');
INSERT INTO pokemon(pokemon_name, pokemon_id, pokemon_type) VALUES ('Wartortle', 9, 'water');

--DML update
UPDATE pokemon SET pokemon_second_type='Poison' WHERE pokemon_id=1;
--UPDATE pokemon SET pokemon_second_type = null WHERE pokemon_name='Pikachu';

DELETE FROM pokemon WHERE pokemon_id=121;
DELETE FROM pokemon;

commit;--before we commit, it just exists in the sql developer cache
--remember, we should commit DML stuff, since you can only rollback DML
--difference between truncate and delete (without a where clause)
--delete you can roll back from
--truncate you can't

rollback;
