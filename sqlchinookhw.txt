--2.1 SELECT

--1.
SELECT * FROM employee;

--2.
SELECT * FROM employee WHERE LASTNAME = 'King';

--3.
SELECT * FROM employee WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--2.2 ORDER BY

--1.
SELECT * FROM ALBUM 
ORDER BY TITLE DESC;

--2.
SELECT FIRSTNAME FROM CUSTOMER
ORDER BY CITY ASC;

--2.3 INSERT INTO
SELECT * FROM GENRE

--1.
INSERT INTO GENRE (GENREID, NAME)
VALUES (26, 'Indie Rock');
/
INSERT INTO GENRE (GENREID, NAME)
VALUES (27, 'Dubstep');


SELECT * FROM EMPLOYEE

--2.
INSERT INTO EMPLOYEE VALUES (10, 'Gray', 'Chris', 'Blob', 1, TO_DATE('1995/09/27', 'yyyy/mm/dd'), TO_DATE('15-MAY-19', 'dd-mon-yy'), '3512 Avonco Dr', 'Spring Valley', 'CA', 'United States', 21075, '+1 (645)361-5432', '+1 (683) 543-1232', 'chris@gray.com');
/
INSERT INTO EMPLOYEE VALUES (12, 'Karvelis', 'Joshua', 'AKTKDS', 1, TO_DATE('21-JAN-1994', 'dd-mon-yy'), TO_DATE('15-MAY-19', 'dd-mon-yy'), '5362 Padilla Drive', 'Dallas', 'TX', 'United States', 21076, '+1 (222) 222-2222', '+1 (222) 222-2222', 'karvelis@aktkds.com');


--3.
SELECT * FROM CUSTOMER

INSERT INTO CUSTOMER VALUES(99,'John', 'Black', 'Furisdale', '2345 Driver Ln', 'Frankwood', 'OH', 'United States', 45132, '+1(730)654-9876','+1(730)765-4321','furisdalemvp@gmail.com',3);
/
INSERT INTO CUSTOMER VALUES(60,'John', 'Burnoff', 'Chromsdale', '2343 Driver Ln', 'Frankwood', 'OH', 'United States', 45132, '+1(730)654-9654','+1(730)765-4221','chromsdalejohn@gmail.com',2);
/

--2.4 UPDATE
SELECT * FROM Artist
ORDER BY NAME;


UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE CUSTOMERID = 32;

UPDATE ARTIST
SET NAME = 'CCR'
WHERE ARTISTID = 76;

--2.5 LIKE
SELECT * FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BETWEEN
SELECT * FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM employee
WHERE HIREDATE BETWEEN '01-JUN-2003' and '01-MAR-2004';

--2.7 DELETE
SELECT * FROM CUSTOMER

ALTER TABLE INVOICE
DROP CONSTRAINT FK_INVOICECUSTOMERID;

DELETE FROM CUSTOMER
WHERE CUSTOMERID = 32;

--3.1 SYSTEM DEFINED FUNCTIONS
SELECT CURRENT_TIMESTAMP
FROM dual;

SELECT LENGTH(NAME)
FROM MEDIATYPE;

--3.2 SYSTEM DEFINED AGGREGATE FUNCTIONS
SELECT AVG(TOTAL) 
FROM INVOICE;

SELECT MAX(UNITPRICE)
FROM TRACK;

--3.3 USER DEFINED SCALAR FUNCTIONS
CREATE OR REPLACE FUNCTION AVG_PRICE
RETURN NUMBER
IS 
X NUMBER;
BEGIN
    SELECT AVG(UNITPRICE)
    INTO X
    FROM INVOICELINE;
    RETURN X;
END;
/

DECLARE
    Y NUMBER;
BEGIN
    Y := AVG_PRICE;
    DBMS_OUTPUT.PUT_LINE(Y);
END;
/

--3.4 USER DEFINED TABLE VALUED FUNCTIONS
CREATE OR REPLACE FUNCTION after_1968
RETURN SYS_REFCURSOR
IS my_cursor SYS_REFCURSOR;

BEGIN
    OPEN my_cursor FOR
    SELECT LASTNAME, FIRSTNAME, BIRTHDATE
    FROM EMPLOYEE
    group by LASTNAME, FIRSTNAME, BIRTHDATE
    having min BIRTHDATE > '12-DEC-68';
    ORDER BY birthdate;
    
    return my_cursor
END;
/

DECLARE
AGE SYS_REFCURSOR;
SOME_ID EMPLOYEE.EMPLOYEEID%TYPE;
SOME_LN EMPLOYEE.LASTNAME%TYPE;
SOME_FN EMPLOYEE.FIRSTNAME%TYPE;
SOME_BD EMPLOYEE.BIRTHDATE%TYPE;
BEGIN
    AGE := EMP_AGE;
    LOOP
    FETCH AGE INTO SOME_ID, SOME_LN, SOME_FN, SOME_BD;
    EXIT WHEN AGE%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('ID: '||SOME_ID||', LASTNAME: '||SOME_LN||', FIRSTNAME: '||SOME_FN||', BIRTHDAY:'||SOME_BD);
    END LOOP;
    CLOSE AGE;
END;
/

--4.1
CREATE OR REPLACE PROCEDURE SP_GET_EMPNAMES (NAMES OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN NAMES FOR
    SELECT FIRSTNAME, LASTNAME
    FROM EMPLOYEE;
END;
/

DECLARE
    NAMES SYS_REFCURSOR;
    SOME_FIRSTN EMPLOYEE.FIRSTNAME%TYPE;
    SOME_LASTN EMPLOYEE.LASTNAME%TYPE;
BEGIN
    SP_GET_EMPNAMES(NAMES);
    LOOP
    FETCH NAMES INTO SOME_FIRSTN, SOME_LASTN;
    EXIT WHEN NAMES%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('FIRSTNAME: '||SOME_FIRSTN||', LASTNAME: '||SOME_LASTN);
    END LOOP;
    CLOSE NAMES;
END; 
/
--4.2

CREATE OR REPLACE PROCEDURE SP_UPDATE_EMPLOYEE (EMPLOYEE_ID IN NUMBER, SOME_FN IN VARCHAR2, SOME_LN IN VARCHAR2)
IS
BEGIN
    UPDATE EMPLOYEE
    SET LASTNAME = SOME_LN, FIRSTNAME = SOME_FN
    WHERE EMPLOYEE = EMPLOYEE_ID;
    COMMIT;
END; 
/

CREATE OR REPLACE PROCEDURE SP_GET_MANAGER (EMPLOYEE_ID IN NUMBER, MANAGER_ID OUT NUMBER)
IS 
BEGIN
    SELECT REPORTSTO
    INTO MANAGER_ID
    FROM EMPLOYEE
    WHERE EMPLOYEEID = EMPLOYEE_ID;
END;


--4.3
CREATE OR REPLACE PROCEDURE SP_GET_CUSTOMER (CUST OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN CUST FOR
    SELECT FIRSTNAME, LASTNAME, COMPANY
    FROM CUSTOMER;
END;
/

DECLARE
    CUST SYS_REFCURSOR;
    SOME_FIRSTN CUSTOMER.FIRSTNAME%TYPE;
    SOME_LASTN CUSTOMER.LASTNAME%TYPE;
    SOME_COMP CUSTOMER.COMPANY%TYPE;
BEGIN
    SP_GET_CUSTOMER(CUST);
    LOOP
    FETCH CUST INTO SOME_FIRSTN, SOME_LASTN, SOME_COMP;
    EXIT WHEN CUST%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('FIRSTNAME: '||SOME_FIRSTN||', LASTNAME: '||SOME_LASTN||', COMPANY: '||SOME_COMP);
    END LOOP;
    CLOSE CUST;
END; 
/

--5.0
CREATE OR REPLACE PROCEDURE DELETE_INVOICE (INV_ID IN NUMBER)
IS
BEGIN
    EXECUTE IMMEDIATE 'ALTER TABLE INVOICELINE 
    DROP CONSTRAINT FK_INVOICELINEINVOICEID';
    DELETE INVOICE WHERE INVOICEID = INV_ID;
    COMMIT; 
END;
/




--6.1
--NOT ALLOWED TO MAKE THE SEQUENCE 
CREATE SEQUENCE SQ.EMPLOYEE_PK
START WITH 1000
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TR_EMPLOYEE
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    SELECT SQ.EMPLOYEE_PK.NEXTVAL INTO :NEW.EMPLOYEEID FROM DUAL;
END; 
/

CREATE SEQUENCE SQ_ALBUM_PK
START WITH 1000
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TR_ALBUM
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
    SELECT SQ_ALBUM_PK.NEXTVAL INTO :NEW.ALBUMID FROM DUAL;
END;
/

CREATE SEQUENCE SQ_CUSTOMER_PK
START WITH 1000
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TR_CUSTOMER
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
    SELECT SQ_CUSTOMER_PK.NEXTVAL INTO :NEW.CUSTOMERID FROM DUAL;
END;
/

--7.1

SELECT LASTNAME, FIRSTNAME, INVOICEID 
FROM CUSTOMER 
INNER JOIN INVOICE 
ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;

--7.2

SELECT CUSTOMER.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL
FROM CUSTOMER
LEFT OUTER JOIN INVOICE
ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;

--7.3

SELECT NAME, TITLE
FROM ARTIST 
RIGHT OUTER JOIN ALBUM
ON ALBUM.ARTISTID = ARTIST.ARTISTID;

--7.4

SELECT NAME
FROM ARTIST
CROSS JOIN ALBUM
ORDER BY NAME ASC;

--7.5

SELECT *--A.EMPLOYEEID, B.EMPLOYEEID, A.LASTNAME, B.LASTNAME, A.TITLE, B.TITLE
FROM EMPLOYEE A
INNER JOIN EMPLOYEE B
ON B.EMPLOYEEID = A.REPORTSTO;




commit;
exit;