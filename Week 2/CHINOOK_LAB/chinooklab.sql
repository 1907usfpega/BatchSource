-- 2.1.1 SELECT ALL RECORDS FROM EMPLOYEE
SELECT * FROM EMPLOYEE;
-- END 2.1.1

-- 2.1.2 SELECT ALL RECORDS FROM EMPLOYEE WHERE LASTNAME IS KING
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
-- END 2.1.2

-- 2.1.3 SELECT ALL RECORDS FROM EMPLOYEE WHERE FIRST NAME IS ANDREW AND REPORTS TO NULL
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;
-- END 2.1.3

-- 2.2.1 SELECT ALL ALBUMS AND SORT IN DESCENDING ORDER BY TITLE
SELECT * FROM ALBUM ORDER BY TITLE DESC;
-- END 2.2.1

-- 2.2.2 SELECT ALL CUSTOMERS AND SORT IN ASCENDING ORDER BY CITY
SELECT FIRSTNAME, CITY FROM CUSTOMER ORDER BY CITY ASC;
-- END 2.2.2

-- 2.3.1 INSERT TWO NEW VALUES INTO GENRE TABLE
INSERT INTO GENRE VALUES (26, 'Black Metal');
INSERT INTO GENRE VALUES (27, 'Death Metal');
SELECT * FROM GENRE;
-- END 2.3.1


-- 2.3.2 INSERT TWO NEW VALUES INTO EMPLOYEE TABLE 
INSERT INTO EMPLOYEE VALUES (9, 'Thompson', 'Zach', 'Software Developer', 6, TO_DATE('1993-11-12', 'yyyy-mm-dd'), TO_DATE('2019-07-15', 'yyyy-mm-dd'), '92 R Circle', 'Lethbridge', 
                            'AB', 'Canada', 'T1H 3G7', '+1 (334) 806-8818', '+1 (334) 806-8819', 'zthompson2350@chinookcorp.com');
INSERT INTO EMPLOYEE VALUES (10, 'Karvelis', 'Josh', 'Software Developer', 6, TO_DATE('1990-07-15', 'yyyy-mm-dd'), TO_DATE('2019-07-01', 'yyyy-mm-dd'), '12 C Street', 'Lethbridge', 
                            'AB', 'Canada', 'T1H 5K9', '+1 (334) 234-3820', '+1 (334) 283-7426', 'JoshK@chinookcorp.com');                            
SELECT * FROM EMPLOYEE; 
-- END 2.3.2

-- 2.3.3 INSERT TWO NEW VALUES INTO CUSTOMER TABLE
INSERT INTO CUSTOMER VALUES (60, 'Sarah', 'Sanders', 'White House', '1 Pennsylvania Avenue', 'Washington D.C.', 'DC', 'USA', '11111', '+1 293-827-9393', '+1 283-273-3928', 'hackMePutin@gmail.com', 4);
INSERT INTO CUSTOMER VALUES (61, 'Donald', 'Trump', 'White House', '1 Pennsylvania Avenue', 'Washington D.C.', 'DC', 'USA', '11111', '+1 382-377-3928', '+1 372-382-9392', 'PutinIsMyDaddy@gmail.com', 4);
SELECT * FROM CUSTOMER;
-- END 2.3.3

-- 2.4.1 CHANGE AARON MITCHELL'S NAME TO ROBERT WALTER
SELECT * FROM CUSTOMER WHERE FIRSTNAME = 'Aaron';
UPDATE CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walter' WHERE CUSTOMERID = 32;
SELECT * FROM CUSTOMER WHERE CUSTOMERID = 32;
-- END 2.4.1

-- 2.4.2 CHANGE NAME OF CREEDENCE CLEARWATER REVIVAL TO CCR
UPDATE ARTIST SET NAME = 'CCR' WHERE ARTISTID = 76;
SELECT * FROM ARTIST WHERE ARTISTID = 76;
-- END 2.4.2

-- 2.5 SELECT ALL INVOICES WHERE BILLING ADDRESS BEGINS WITH A T
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';
-- END 2.5

-- 2.6.1 SELECT ALL INVOICES WHERE TOTAL IS BETWEEN 15 AND 50
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 50;
-- END 2.6.1

-- 2.6.1 SELECT ALL EMPLOYEES HIRED BETWEEN 1 JUNE 2003 AND 1 MARCH 2004
SELECT * FROM EMPLOYEE WHERE MONTHS_BETWEEN(TO_DATE('2004-03-01', 'yyyy-mm-dd'), HIREDATE) < MONTHS_BETWEEN(TO_DATE('2004-03-01', 'yyyy-mm-dd'), TO_DATE('2003-06-01', 'yyyy-mm-dd'))
AND MONTHS_BETWEEN(TO_DATE('2004-03-01', 'yyyy-mm-dd'), HIREDATE) > 0;
-- END 2.6.1

-- 2.7 DELETE ROBERT WALTER FROM CUSTOMER TABLE
SELECT * FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';
SELECT * FROM INVOICE WHERE CUSTOMERID = 32;
SELECT * FROM INVOICELINE WHERE INVOICEID = 245;
SELECT * FROM INVOICELINE WHERE INVOICEID = 268;
SELECT * FROM INVOICELINE WHERE INVOICEID = 290;
SELECT * FROM INVOICELINE WHERE INVOICEID = 342;
SELECT * FROM INVOICELINE WHERE INVOICEID = 50;
SELECT * FROM INVOICELINE WHERE INVOICEID = 61;
SELECT * FROM INVOICELINE WHERE INVOICEID = 116;
DELETE FROM INVOICELINE WHERE INVOICEID = 245 OR INVOICEID = 268 OR INVOICEID = 290 OR INVOICEID = 342 OR INVOICEID = 50 OR INVOICEID = 61 OR INVOICEID = 116;
DELETE FROM INVOICE WHERE CUSTOMERID = 32;
DELETE FROM CUSTOMER WHERE FIRSTNAME='Robert' AND LASTNAME = 'Walter';
-- END 2.7

-- 3.1.1 GET CURRENT TIME
SELECT LocalTimeStamp FROM DUAL;
-- END 3.1.1

-- 3.1.2 GET THE LENGTH OF THE NAME IN MEDIATYPE
SELECT NAME "NAME",LENGTH(NAME) "LENGTH" FROM MEDIATYPE WHERE MEDIATYPEID < 6;
-- END 3.1.2

-- 3.2.1 GET AVERAGE TOTAL OF ALL INVOICES
SELECT AVG(TOTAL) FROM INVOICE;
-- END 3.2.1

-- 3.2.2 GET MAX PRICE OF TRACKS
SELECT MAX(UNITPRICE) FROM TRACK;
-- END 3.2.2


-- 3.3 CREATE A FUNCTION THAT RETURNS THE AVERAGE PRICE OF INVOICELINE ITEMS
CREATE OR REPLACE FUNCTION AVGPRICE
RETURN NUMBER AS
AVGPRICE NUMBER(10,2);
TOTALPRICE NUMBER(10,2);
NUMLINES NUMBER;
BEGIN
SELECT SUM(UNITPRICE) INTO TOTALPRICE
FROM INVOICELINE;
SELECT COUNT(UNITPRICE) INTO NUMLINES
FROM INVOICELINE;
SELECT (TOTALPRICE / NUMLINES) INTO AVGPRICE
FROM DUAL;
RETURN AVGPRICE;
END;
/

SELECT AVGPRICE FROM DUAL;
-- END 3.3

-- 3.4 CREATE A FUNCTION THAT RETURNS ALL EMPLOYEES BORN AFTER 1968
CREATE OR REPLACE TYPE t_employee_post_1968_row AS OBJECT (
    EMPLOYEEID NUMBER,
    LASTNAME VARCHAR2(20),
    FIRSTNAME VARCHAR2(20),
    TITLE VARCHAR2(30),
    REPORTSTO NUMBER,
    BIRTHDATE DATE,
    HIREDATE DATE,
    ADDRESS VARCHAR2(70),
    CITY VARCHAR2(40),
    STATE VARCHAR2(40),
    COUNTRY VARCHAR2(40),
    POSTALCODE VARCHAR2(10),
    PHONE VARCHAR2(24),
    FAX VARCHAR2(24),
    EMAIL VARCHAR2(60)
);
/

CREATE OR REPLACE TYPE t_employee_post_1968_table AS TABLE OF t_employee_post_1968_row;
/

CREATE OR REPLACE FUNCTION GETEMPLOYEESPOST1968
RETURN t_employee_post_1968_table 
IS
v_ret t_employee_post_1968_table;
BEGIN
v_ret := t_employee_post_1968_table();
SELECT *
FROM EMPLOYEE;
END;
/
-- END 3.4

-- 4.1 CREATE A STORED PROCEDURE TO GET FIRST AND LAST NAMES OF EMPLOYEES
CREATE OR REPLACE PROCEDURE GETEMPLOYEENAMES
(S OUT SYS_REFCURSOR)
IS
BEGIN
OPEN S FOR 
SELECT FIRSTNAME,LASTNAME FROM EMPLOYEE;
END;
/

SET SERVEROUT ON;

DECLARE S SYS_REFCURSOR;
FIRSTN EMPLOYEE.FIRSTNAME%TYPE;
LASTN EMPLOYEE.LASTNAME%TYPE;
BEGIN
GETEMPLOYEENAMES(S);
    LOOP
    FETCH S INTO FIRSTN, LASTN;
    EXIT WHEN S%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(FIRSTN||' '||LASTN);
    END LOOP;
CLOSE S;
END;
/
-- END 4.1

-- 4.2.1 CREATE A PROCEDURE TO UPDATE PERSONAL INFORMATION OF AN EMPLOYEE
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE_INFO
(EID IN NUMBER, ADDR IN VARCHAR2, CTY IN VARCHAR2, STT IN VARCHAR2, CNTRY IN VARCHAR2, PCODE IN VARCHAR2)
IS
BEGIN
UPDATE EMPLOYEE
SET ADDRESS = ADDR, CITY = CTY, STATE = STT, COUNTRY = CNTRY, POSTALCODE = PCODE
WHERE EMPLOYEEID = EID;
COMMIT;
END;
/

EXECUTE UPDATE_EMPLOYEE_INFO(3, '13206 Bruce B Downs BLVD', 'Tampa', 'Florida', 'USA', '34534');
-- END 4.2.1

-- 4.2.2 CREATE A PROCEDURE TO RETURN THE MANAGERS OF AN EMPLOYEE
CREATE OR REPLACE PROCEDURE EMPLOYEE_REPORTS_TO (S OUT SYS_REFCURSOR)
IS
BEGIN
OPEN S FOR
SELECT EMPLOYEEID,REPORTSTO
FROM EMPLOYEE;
END;
/

DECLARE S SYS_REFCURSOR;
EID EMPLOYEE.EMPLOYEEID%TYPE;
MID EMPLOYEE.REPORTSTO%TYPE;
EFNAME EMPLOYEE.FIRSTNAME%TYPE;
ELNAME EMPLOYEE.LASTNAME%TYPE;
MFNAME EMPLOYEE.FIRSTNAME%TYPE;
MLNAME EMPLOYEE.LASTNAME%TYPE;
BEGIN
EMPLOYEE_REPORTS_TO(S);
    LOOP
    FETCH S INTO EID,MID;
    EXIT WHEN S%NOTFOUND;
    IF MID IS NOT NULL THEN
        SELECT FIRSTNAME,LASTNAME INTO EFNAME,ELNAME FROM EMPLOYEE WHERE EMPLOYEEID = EID;
        SELECT FIRSTNAME,LASTNAME INTO MFNAME,MLNAME FROM EMPLOYEE WHERE EMPLOYEEID = MID;
        DBMS_OUTPUT.PUT_LINE('Employee ' ||EFNAME||' '||ELNAME|| ' Reports to ' ||MFNAME|| ' ' ||MLNAME);
    END IF;
    END LOOP;
CLOSE S;
END;
/
-- END 4.2.2

-- 4.3 CREATE A PROCEDURE TO RETURN THE NAME AND COMPANY OF A CUSTOMER
CREATE OR REPLACE PROCEDURE GET_CUSTOMER_INFO
(CID IN NUMBER)
IS
FNAME CUSTOMER.FIRSTNAME%TYPE;
LNAME CUSTOMER.LASTNAME%TYPE;
CMPNY CUSTOMER.COMPANY%TYPE;
BEGIN
SELECT FIRSTNAME,LASTNAME,COMPANY INTO FNAME,LNAME,CMPNY FROM CUSTOMER WHERE CUSTOMERID = CID;
IF CMPNY IS NOT NULL THEN
    DBMS_OUTPUT.PUT_LINE('CUSTOMER: ' ||FNAME|| ' ' ||LNAME|| CHR(10) || 'COMPANY: ' ||CMPNY);
ELSE
    DBMS_OUTPUT.PUT_LINE('CUSTOMER: ' ||FNAME|| ' ' ||LNAME|| CHR(10) || 'COMPANY: NULL');
END IF;
END;
/

EXECUTE GET_CUSTOMER_INFO(23);
EXECUTE GET_CUSTOMER_INFO(16);
-- END 4.3

-- 5.0.1 CREATE A TRANSACTION THAT GIVEN AN INVOICEID DELETES THAT INVOICE
ALTER TABLE INVOICELINE DROP CONSTRAINT FK_INVOICELINEINVOICEID;
ALTER TABLE INVOICELINE ADD CONSTRAINT FK_INVOICELINEINVOICEID
FOREIGN KEY (INVOICEID) REFERENCES INVOICE(INVOICEID) ON DELETE CASCADE;

CREATE OR REPLACE PROCEDURE DELINVOICE (IID IN NUMBER)
IS
BEGIN
DELETE FROM INVOICE WHERE INVOICEID = IID;
END;
/

EXECUTE DELINVOICE(216);
-- END 5.0.1

-- 5.0.2 CREATE A TRANSACTION NESTED WITHIN A STORED PROCEDURE THAT INSERTS A NEW RECORD INTO THE CUSTOMER TABLE
CREATE OR REPLACE PROCEDURE ADDCUSTOMER
(CID IN NUMBER, FN IN VARCHAR2, LN IN VARCHAR2, CMPNY IN VARCHAR2,
ADDR IN VARCHAR2, CTY IN VARCHAR2, STT IN VARCHAR2, CNTRY IN VARCHAR2,
PCODE IN VARCHAR2, PHNO IN VARCHAR2, FX IN VARCHAR2, EML IN VARCHAR2, SRID IN NUMBER)
IS
BEGIN
INSERT INTO CUSTOMER VALUES(CID,FN,LN,CMPNY,ADDR,CTY,STT,CNTRY,PCODE,PHNO,FX,EML,SRID);
COMMIT;
END;
/

EXECUTE ADDCUSTOMER(62,'Zach','Thompson','Revature','12345 Bruce B Downs BLVD','Tampa','Florida','USA','12345','3348068818','3348068819','zthompson2350@gmail.com',4);
-- END 5.0.2

-- 6.1.1 CREATE AN AFTER INSERT TRIGGER ON EMPLOYEE TABLE THAT IS FIRED AFTER NEW RECORD IS INSERTED INTO TABLE
CREATE OR REPLACE TRIGGER EMPLOYEETRIG
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
DECLARE v_fname VARCHAR2(20);
v_title VARCHAR2(30);
BEGIN
SELECT :NEW.FIRSTNAME INTO v_fname FROM DUAL;
SELECT :NEW.TITLE INTO v_title FROM DUAL;
DBMS_OUTPUT.PUT_LINE(v_fname || ', ' || v_title || ' is a new Employee');
END;
/

INSERT INTO EMPLOYEE VALUES (12, 'Werbermanjensen', 'Smitty', 'Software Developer', 6, TO_DATE('1978-11-07', 'yyyy-mm-dd'), TO_DATE('2015-08-08', 'yyyy-mm-dd'), '1 Smitty Lane', 'Lethbridge', 
                            'AB', 'Canada', 'T1H 3G7', '+1 (334) 123-4567', '+1 (334) 890-1234', 'werbermanjensenS@chinookcorp.com');
-- END 6.1.1

-- 6.1.2 CREATE AN AFTER UPDATE TRIGGER ON ALBUM TABLE THAT IS FIRED AFTER A ROW IS INSERTED INTO TABLE
CREATE OR REPLACE TRIGGER ALBUMTRIG
AFTER UPDATE ON ALBUM
FOR EACH ROW
DECLARE v_user VARCHAR2(20);
BEGIN
SELECT USER INTO v_user FROM DUAL;
DBMS_OUTPUT.PUT_LINE(v_user || ' updated ALBUM Table.');
END;
/

UPDATE ALBUM SET TITLE = 'As Years Go By' WHERE ALBUMID = 197;
-- END 6.1.2

-- 6.1.3 CREATE AN AFTER DELETE TRIGGER ON CUSTOMER TABLE THAT IS FIRED AFTER A ROW IS DELETED FROM THE TABLE
CREATE OR REPLACE TRIGGER CUSTOMERTRIG
AFTER DELETE ON CUSTOMER
FOR EACH ROW
DECLARE v_user VARCHAR2(20);
BEGIN
SELECT USER INTO v_user FROM DUAL;
DBMS_OUTPUT.PUT_LINE(v_user || ' deleted an entry from CUSTOMER Table.');
END;
/

DELETE FROM CUSTOMER WHERE CUSTOMERID = 63;
-- END 6.1.3

-- 7.1 CREATE AN INNER JOIN THAT JOINS CUSTOMERS AND ORDERS AND SPECIFIES THE NAME OF THE CUSTOMER
--     AND THE INVOICEID
SELECT FIRSTNAME,LASTNAME,INVOICEID
FROM CUSTOMER
INNER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;
-- END 7.1

-- 7.2 CREATE AN OUTER JOIN THAT JOINS THE CUSTOMER AND INVOICE TABLE SPECIFYING THE CUSTOMERID,
--     FIRST NAME, LAST NAME, INVOICEID, AND TOTAL
SELECT CUSTOMER.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL
FROM CUSTOMER
FULL OUTER JOIN INVOICE
ON (CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID);
-- END 7.2

-- 7.3 CREATE A RIGHT JOIN THAT JOINS ALBUM AND ARTIST SPECIFYING ARTIST NAME AND TITLE
SELECT NAME, TITLE
FROM ALBUM
RIGHT JOIN ARTIST
ON (ARTIST.ARTISTID = ALBUM.ARTISTID);
-- END 7.3

-- 7.4 CREATE A CROSS JOIN THAT JOINS ALBUM AND ARTIST AND SORTS BY ARTIST NAME IN ASCENDING ORDER
SELECT NAME, TITLE
FROM ARTIST
CROSS JOIN ALBUM
ORDER BY NAME ASC;
-- END 7.4

-- 7.5 PERFORM A SELF JOIN ON THE EMPLOYEE TABLE JOINING ON THE REPORTSTO COLUMN
SELECT E1.FIRSTNAME, E1.LASTNAME, E2.FIRSTNAME, E2.LASTNAME
FROM EMPLOYEE E1
INNER JOIN EMPLOYEE E2
ON E1.EMPLOYEEID = E2.REPORTSTO;
-- END 7.5
