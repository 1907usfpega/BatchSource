/*
CREATE SEQUENCE[seq name]
MINVALUE[value]
MAXVALUE[value]
STARTWITH[value]
INCREMENT BY[value]
CACHE[value];
*/
CREATE SEQUENCE MYTESTSEQ
MINVALUE 100
MAXVALUE 10000
START WITH 5000
INCREMENT BY -5
CACHE 20;
SELECT MYTESTSEQ.NEXTVAL FROM DUAL;

INSERT INTO SCHOOL VALUES(MYTESTSEQ.NEXTVAL, 'HAVARD');
--A VIEW TO A KILL
--A VIEW IS A SAVED SELECT STATEMENT
CREATE OR REPLACE VIEW MYVIEW
AS
SELECT TITLE AS A_lIST_OF_STUFF FROM ALBUM
UNION
SELECT NAME FROM ARTIST;

SELECT * FROM MYVIEW
WHERE a_list_of_stuff LIKE 'T%' OR a_list_of_stuff LIKE 'B%';
--INDEX
/* CREATE INDEX[my name]
ON [Table name] ( [column name] ) ASC/DESC;
*/
CREATE INDEX MYINDEX
ON ALBUM(ARTISTID);
--tRIGGER
CREATE OR REPLACE TRIGGER MYTRIG
BEFORE INSERT ON STUDENT
FOR EACH ROW
BEGIN
SELECT MYTESTSEQ.NEXTVAL INTO: NEW.S_ID FROM DUAL;
END;
/

INSERT INTO STUDENT VALUES( 67,'DEONTA',5);
INSERT INTO STUDENT (S_NAME,SCH_ID) VALUES ('KENNY G',1);
INSERT INTO STUDENT (S_NAME,SCH_ID) VALUES ('DANNY MCBRIDE',4);

ALTER TABLE STUDENT
ADD CONSTRAINT PKID
PRIMARY KEY(S_ID);

--user DEFINED FUNCTIONS
-- FUCNTIONS
/* FUNCTIONS ARE A BLOCK OF CODE WE CAN EXECUTE
THEY MUST RETURN ONE AND ONLY ONE VALUE
CAN HAVE 0+ PARAMTERS
FUNCTIONS CAN CALL OTHER FUNCTIONS
CANNOT CALL STORED PROCEDURES
NO TRANSACTIONS OR DML
*/
CREATE OR REPLACE FUNCTION CALC_TAX
(T_ID IN NUMBER, TAX IN NUMBER:=.1, TESTDOG IN NUMBER:=1)
RETURN NUMBER AS
TOTAL_PRICE NUMBER (10,2);
BEGIN
SELECT UNITPRICE INTO TOTAL_PRICE
FROM TRACK
WHERE TRACKID= T_ID;
RETURN (TOTAL_PRICE +(TOTAL_PRICE*TAX))*TESTDOG;
END;
/

--USE CALC_TAX
SELECT CALC_TAX(548,.08,3) FROM DUAL;
--SELECT CALC_TAX(548,0,3) FROM DUAL;

select *from track;

--Stored PROCEDURE
CREATE OR REPLACE PROCEDURE MYSTOPRO
(NAME IN VARCHAR2)
AS 
BEGIN
INSERT INTO SCHOOL VALUES(MYTESTSEQ.NEXTVAL,NAME);
COMMIT;
END;
/
EXECUTE MYSTOPRO('MIT');

--MORE COMPLEX STRUCTURE
CREATE TABLE BEAR(
BEAR_ID NUMBER PRIMARY KEY,
BEAR_TYPE_ID NUMBER,
BEAR_NAME VARCHAR2(100),
BEAR_BIRTHDATE DATE,
BEAR_WEIGHT NUMBER DEFAULT 200,
CAVE_ID NUMBER);

CREATE TABLE BEAR_TYPE(
BEAR_TYPE_ID NUMBER PRIMARY KEY,
BEAR_TYPE_NAME VARCHAR2(100))
;

CREATE TABLE CAVE(
CAVE_ID NUMBER PRIMARY KEY,
CAVE_NAME VARCHAR2(100),
MAX_BEARS NUMBER DEFAULT 4
);

CREATE TABLE BEEHIVE(
BEEHIVE_ID NUMBER PRIMARY KEY,
BEEHIVE_WEIGHT NUMBER DEFAULT 50);

CREATE TABLE BEAR_BEEHIVE(
BEAR_ID NUMBER,
BEEHIVE_ID NUMBER,
PRIMARY KEY (BEAR_ID,BEEHIVE_ID)
);

ALTER TABLE BEAR
ADD CONSTRAINT FK_BEAR_BEAR_TYPE
FOREIGN KEY(BEAR_TYPE_ID) REFERENCES BEAR_TYPE(BEAR_TYPE_ID);

ALTER TABLE BEAR
ADD CONSTRAINT FK_BEAR_CAVE
FOREIGN KEY (CAVE_ID) REFERENCES CAVE(CAVE_ID);

ALTER TABLE BEAR_BEEHIVE
ADD CONSTRAINT FK_BEAR_BEEHIVE_BEEHIVE
FOREIGN KEY (BEEHIVE_ID) REFERENCES BEEHIVE(BEEHIVE_ID);

ALTER TABLE BEAR_BEEHIVE
ADD CONSTRAINT FK_BEAR_BEEHIVE_BEAR
FOREIGN KEY (BEAR_ID)REFERENCES BEAR(BEAR_ID);

ALTER TABLE BEAR
ADD CONSTRAINT CK_BEAR_WEIGHT_POSITIVE
CHECK(BEAR_WEIGHT>0);

ALTER TABLE BEEHIVE
ADD CONSTRAINT CK_BEEHIVE_WEIGHT_POSITIVE
CHECK(BEEHIVE_WEIGHT>0);

ALTER TABLE CAVE
ADD CONSTRAINT UQ_CAVE_NAME
UNIQUE(CAVE_NAME);

ALTER TABLE BEAR_TYPE
ADD CONSTRAINT UQ_TYPE_NAME
UNIQUE (BEAR_TYPE_NAME);

CREATE OR REPLACE PROCEDURE BEARPRO
(CAVE_NAME IN VARCHAR2, BEAR_NAME IN VARCHAR2,
BEAR_BIRTHDATE IN DATE)
AS
BEGIN 
INSERT INTO CAVE VALUES(MYTESTSEQ.NEXTVAL,CAVE_NAME,4);
INSERT INTO BEEHIVE VALUES(MYTESTSEQ.NEXTVAL,50);
--INSERT INTO BEAR_TYPE VALUES(1,'BLACK');
INSERT INTO BEAR VALUES(MYTESTSEQ.NEXTVAL, 1,BEAR_NAME,BEAR_BIRTHDATE,2000,(MYTESTSEQ.CURRVAL+10));
COMMIT;
END;
/
EXECUTE BEARPRO('MATTSCAVE2','MATTBONDS2',DATE '2013-06-26');



--CURSORS 
--PROCEDURE WITH A CURSOR AS AN OUT PARAMETER

CREATE OR REPLACE PROCEDURE GET_ALL_ALBUMS
(S OUT SYS_REFCURSOR)
IS
BEGIN
OPEN S FOR
SELECT ALBUMID,TITLE FROM ALBUM;
END;
/
SET SERVEROUT ON;

DECLARE S SYS_REFCURSOR;
ALBUM_ID ALBUM.ALBUMID%TYPE;--SET ALBUM_ID TO WHATEVER DATATYPE ALBUMID IS
ALBUMNAME ALBUM.TITLE%TYPE;
BEGIN
    GET_ALL_ALBUMS(S);
    LOOP
    FETCH S INTO ALBUM_ID,ALBUMNAME;
    EXIT WHEN S%NOTFOUND; -- BREAK OUT OF LOOP WHEN NO MORE ROWS AVALIBLE
    DBMS_OUTPUT.PUT_LINE(ALBUM_ID||' IS CURRENT ID, '||ALBUMNAME||' IS CURRENT NAME');
    END LOOP;
    CLOSE S;
    END;
    /
    
    
    
    
    
    
